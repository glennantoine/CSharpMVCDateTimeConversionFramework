<hgroup class="title">
    <h1>UiDateTimeRangeModel: </h1>
    <h3>One of the most important aspects of the UiDateTimeRangeModel is that the default constructor requires a TimeZone. Without it the code will not compile.</h3>
    <h3>Looking at the RegisterModel below with a RegistrationDate property of type UiDateTimeRangeModel. The constructor takes a string of "Eastern Standard Time" for the TimeZone.</h3>
    <pre class='brush: csharp'>
                var timeZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time").StandardName;
                var model= new UiDateTimeRangeTestModel 
                                                    {
                                                        UiDateTimeRange = new UiDateTimeRangeModel(timeZone) { }
                                                    };                         
    </pre>
</hgroup>

<pre class='brush: csharp'>
using System;
using CSharpMVCDateTimeConversionFramework.Models.ValidationAttributes;

namespace CSharpMVCDateTimeConversionFramework.Models
{
    [UiDateTimeFormatDateValidation("StartDateTime.LocalDate", ErrorMessageResourceName = "DateFormatValid", ErrorMessageResourceType = typeof (Resources.ValidationResource))]
    [UiDateTimeFormatDateValidation("EndDateTime.LocalDate", ErrorMessageResourceName = "DateFormatValid", ErrorMessageResourceType = typeof(Resources.ValidationResource))]
    [UiDateTimeFormatTimeValidation("StartDateTime.LocalTime", ErrorMessageResourceName = "TimeFormatValid", ErrorMessageResourceType = typeof(Resources.ValidationResource))]
    [UiDateTimeFormatTimeValidation("EndDateTime.LocalTime", ErrorMessageResourceName = "TimeFormatValid", ErrorMessageResourceType = typeof(Resources.ValidationResource))]
    [UiDateTimeMaxLimitDateValidation("StartDateTime.LocalDate", 50, ErrorMessageResourceName = "DateMustBeLessThanYearsInFuture", ErrorMessageResourceType = typeof(Resources.ValidationResource))]
    [UiDateTimeMaxLimitDateValidation("EndDateTime.LocalDate", 50, ErrorMessageResourceName = "DateMustBeLessThanYearsInFuture", ErrorMessageResourceType = typeof(Resources.ValidationResource))]
    public class UiDateTimeRangeModel
    {
        private string _timeZoneName;

        public string TimeZoneName
        {
            get { return _timeZoneName; }
            set
            {
                _timeZoneName = value;
                if (StartDateTime != null)
                {
                    StartDateTime.TimeZoneName = _timeZoneName;
                }
                if (EndDateTime != null)
                {
                    EndDateTime.TimeZoneName = _timeZoneName;
                }
            }
        }

        /// <summary>
        /// Constructor for UiDateTimeModel that takes in the local time zone name to base the DateTime off of.
        /// </summary>
        /// <param name="timeZoneName">TimeZoneInfo name of the local time being represented.</param>
        public UiDateTimeRangeModel(string timeZoneName)
        {
            StartDateTime = new UiDateTimeModel(timeZoneName);
            EndDateTime = new UiDateTimeModel(timeZoneName);
            TimeZoneName = timeZoneName;
        }

        public UiDateTimeRangeModel(string timeZoneName, DateTime? startDateUtc, DateTime? endDateUtc)
        {
            StartDateTime = new UiDateTimeModel(timeZoneName) {DateTimeUtcValue = startDateUtc};
            EndDateTime = new UiDateTimeModel(timeZoneName) {DateTimeUtcValue = endDateUtc};
            TimeZoneName = timeZoneName;
        }

        public UiDateTimeRangeModel(string timeZoneName, DateTime? startDateUtc, DateTime? endDateUtc, bool isAllDay = false)
        {
            StartDateTime = new UiDateTimeModel(timeZoneName) {DateTimeUtcValue = startDateUtc, NoSetTime = isAllDay};
            EndDateTime = new UiDateTimeModel(timeZoneName) {DateTimeUtcValue = endDateUtc};
            TimeZoneName = timeZoneName;
        }

        public UiDateTimeModel StartDateTime { get; set; }
        public UiDateTimeModel EndDateTime { get; set; }

    }
}
</pre>

<script type="text/javascript">SyntaxHighlighter.all();</script> 