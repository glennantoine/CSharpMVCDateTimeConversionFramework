<hgroup class="title">
    <h1>UiDateTimeModelBinder: </h1>
    <h3>This page is here simply to point out the fact that during a post back to the server the UiDateTimeModelBinder will handle all date conversions required on the UiDateTimeModel.</h3>
    <h3>You will notice that the Global.asx.cs file Application_Start() contains an entry setting the UiDateTimeModelBinder as the default binder for properties of type UiDateTimeModel.</h3>
    <pre class='brush: csharp'>
            //Setup Default Model Binder for UiDateTimeModel 
            ModelBinders.Binders[typeof(UiDateTimeModel)] = new UiDateTimeModelBinder() {
                                                                                            DateFieldName = "LocalDate",
                                                                                            TimeFieldName = "LocalTime",
                                                                                            TimeZoneFieldName = "TimeZoneName"
                                                                                        };     
                                                                                                
    </pre>
</hgroup>

<pre class='brush: csharp'>
using System;
using System.Data.SqlTypes;
using System.Globalization;
using System.Web.Mvc;
using CSharpMVCDateTimeConversionFramework.Resources;
using CSharpMVCDateTimeConversionFramework.Utilities;

namespace CSharpMVCDateTimeConversionFramework.Models.Binders
{
    public class UiDateTimeModelBinder : IModelBinder
    {
        public UiDateTimeModelBinder()
        {
        }

        public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
        {
            if (bindingContext == null)
                throw new ArgumentNullException(ValidationResource.BindingContext);

            //If they just want a full DateTime the handle that here and return model
            DateTime? dateTimeAttempt = GetA&lt;DateTime&gt;(bindingContext, StaticReflection.GetMemberName&lt;UiDateTimeModel&gt;(x => x.DateTimeLocalValue));

            var tzAttempt = bindingContext.ValueProvider.GetValue(bindingContext.ModelName + "." + this.TimeZoneFieldName);
            if (tzAttempt == null)
            {
                throw new ApplicationException(this.TimeZoneFieldName + ValidationResource.UiDateTimeModelTimeZoneRequired);
            }
            var timeZoneAttempt = (string) tzAttempt.ConvertTo(typeof (string));

            if (dateTimeAttempt != null)
                return new UiDateTimeModel(timeZoneAttempt) {DateTimeLocalValue = DateTime.Parse(dateTimeAttempt.Value.ToString(CultureInfo.InvariantCulture))};


            //If they haven't set Month,Day,Year OR Date, set "date" and get ready for an attempt
            if (!this.MonthDayYearFieldNameSet && !this.DateFieldNameSet)
            {
                this.DateFieldName = StaticReflection.GetMemberName&lt;UiDateTimeModel&gt;(x => x.LocalDate);
            }

            //If they haven't set Hour, Minute, Second OR Time, set "time" and get ready for an attempt
            if (!this.HourMinuteSecondFieldNameSet && !this.TimeFieldNameSet)
            {
                this.TimeFieldName = StaticReflection.GetMemberName&lt;UiDateTimeModel&gt;(x => x.LocalTime);
            }

            if (!this.TimeZoneFieldNameSet)
            {
                this.TimeZoneFieldName = StaticReflection.GetMemberName&lt;UiDateTimeModel&gt;(x => x.TimeZoneName);
            }

            DateTime? dateAttempt = null;
            if (bindingContext.ModelMetadata != null && bindingContext.ModelMetadata.ContainerType.Name == typeof (UiDateTimeRangeModel).Name &&
                bindingContext.ModelMetadata.PropertyName == StaticReflection.GetMemberName&lt;UiDateTimeRangeModel&gt;(x => x.EndDateTime) &&
                !bindingContext.ValueProvider.ContainsPrefix(bindingContext.ModelName + "." + StaticReflection.GetMemberName&lt;UiDateTimeModel&gt;(x => x.LocalDate)))
            {
                var valueResult = bindingContext.ValueProvider.GetValue(bindingContext.ModelName);
                dateAttempt = DateTime.Now;
            }

            //Did they want the Date *and* Time?
            if (dateAttempt == null)
            {
                dateAttempt = GetA&lt;DateTime&gt;(bindingContext, this.DateFieldName);
            }
            DateTime? timeAttempt = GetA&lt;DateTime&gt;(bindingContext, this.TimeFieldName);

            if (dateAttempt.HasValue || timeAttempt.HasValue)
            {
                dateAttempt = dateAttempt ?? SqlDateTime.MinValue.Value.Date;
                timeAttempt = timeAttempt ?? SqlDateTime.MinValue.Value;
            }

            //*****************************************************************************
            // The following three sections are added for a more rounded/complete solution.
            // However, this sections are not currently being used in the application.
            //*****************************************************************************

            //Time in parts
            if (this.HourMinuteSecondFieldNameSet && !this.MonthDayYearFieldNameSet)
            {
                timeAttempt = new DateTime(SqlDateTime.MinValue.Value.Year,
                                           SqlDateTime.MinValue.Value.Month,
                                           SqlDateTime.MinValue.Value.Day,
                                           GetA&lt;int&gt;(bindingContext, this.HourFieldName).Value,
                                           GetA&lt;int&gt;(bindingContext, this.MinuteFieldName).Value,
                                           GetA&lt;int&gt;(bindingContext, this.SecondFieldName).Value);
            }

            //Date in parts
            if (this.MonthDayYearFieldNameSet && !this.HourMinuteSecondFieldNameSet)
            {
                dateAttempt = new DateTime(GetA&lt;int&gt;(bindingContext, this.YearFieldName).Value,
                                           GetA&lt;int&gt;(bindingContext, this.MonthFieldName).Value,
                                           GetA&lt;int&gt;(bindingContext, this.DayFieldName).Value,
                                           SqlDateTime.MinValue.Value.Hour,
                                           SqlDateTime.MinValue.Value.Minute,
                                           SqlDateTime.MinValue.Value.Second);
            }

            //Date and Time in parts
            if (this.MonthDayYearFieldNameSet && this.HourMinuteSecondFieldNameSet)
            {
                dateAttempt = new DateTime(GetA&lt;int&gt;(bindingContext, this.YearFieldName).Value,
                                           GetA&lt;int&gt;(bindingContext, this.MonthFieldName).Value,
                                           GetA&lt;int&gt;(bindingContext, this.DayFieldName).Value,
                                           SqlDateTime.MinValue.Value.Hour,
                                           SqlDateTime.MinValue.Value.Minute,
                                           SqlDateTime.MinValue.Value.Second);

                timeAttempt = new DateTime(SqlDateTime.MinValue.Value.Year,
                                           SqlDateTime.MinValue.Value.Month,
                                           SqlDateTime.MinValue.Value.Day,
                                           GetA&lt;int&gt;(bindingContext, this.HourFieldName).Value,
                                           GetA&lt;int&gt;(bindingContext, this.MinuteFieldName).Value,
                                           GetA&lt;int&gt;(bindingContext, this.SecondFieldName).Value);
            }

            DateTime? dateTime;
            if (dateAttempt.HasValue && timeAttempt.HasValue)
            {
                dateTime = new DateTime(dateAttempt.Value.Year,
                                        dateAttempt.Value.Month,
                                        dateAttempt.Value.Day,
                                        timeAttempt.Value.Hour,
                                        timeAttempt.Value.Minute,
                                        timeAttempt.Value.Second);
            }
            else
            {
                dateTime = null;
            }


            if (!string.IsNullOrWhiteSpace(timeZoneAttempt))
            {
                return new UiDateTimeModel(timeZoneAttempt) {DateTimeLocalValue = dateTime};
            }

            return null;
        }

        private Nullable&lt;T&gt; GetA&lt;T&gt;(ModelBindingContext bindingContext, string key) where T : struct
        {
            if (String.IsNullOrEmpty(key))
                return null;

            ValueProviderResult valueResult;

            //Try it with the prefix...
            if (bindingContext.ValueProvider.ContainsPrefix(bindingContext.ModelName))
            {
                valueResult = bindingContext.ValueProvider.GetValue(bindingContext.ModelName + "." + key);
            }
                //Didn't work? Try without the prefix if needed...
            else
            {
                valueResult = bindingContext.ValueProvider.GetValue(key);
            }

            if (valueResult == null)
            {
                return null;
            }

            return (Nullable&lt;T&gt;) valueResult.ConvertTo(typeof (T));
        }

        public string DateFieldName { get; set; }
        public string TimeFieldName { get; set; }

        public string MonthFieldName { get; set; }
        public string DayFieldName { get; set; }
        public string YearFieldName { get; set; }

        public string HourFieldName { get; set; }
        public string MinuteFieldName { get; set; }
        public string SecondFieldName { get; set; }
        public string TimeZoneFieldName { get; set; }

        private bool TimeZoneFieldNameSet
        {
            get { return !String.IsNullOrEmpty(TimeZoneFieldName); }
        }

        private bool DateFieldNameSet
        {
            get { return !String.IsNullOrEmpty(DateFieldName); }
        }

        private bool MonthDayYearFieldNameSet
        {
            get { return !(String.IsNullOrEmpty(MonthFieldName) && String.IsNullOrEmpty(DayFieldName) && String.IsNullOrEmpty(YearFieldName)); }
        }

        private bool TimeFieldNameSet
        {
            get { return !String.IsNullOrEmpty(TimeFieldName); }
        }

        private bool HourMinuteSecondFieldNameSet
        {
            get { return !(String.IsNullOrEmpty(HourFieldName) && String.IsNullOrEmpty(MinuteFieldName) && String.IsNullOrEmpty(SecondFieldName)); }
        }
    }

}
</pre>

@section scripts
{
    <!--Javascript files for SyntaxHighlighter -->
    @Scripts.Render("~/bundles/syntaxHighlighter")    
    <script type="text/javascript"> SyntaxHighlighter.all();</script> 
}